# ========================================
# ркХркерк╛ рк╕рлЗрк▓рлНрк╕ ркПрккрлНрк▓рк┐ркХрлЗрк╢рки ркорлЗркирлЗркЬрк░
# ========================================
# ркЖ ркПркХ ркЬ file ркорк╛ркВ ркмркзрк╛ functions ркЫрлЗ
# ========================================

function Show-Menu {
    Clear-Host
    Write-Host "ЁЯЪА ркХркерк╛ рк╕рлЗрк▓рлНрк╕ ркПрккрлНрк▓рк┐ркХрлЗрк╢рки ркорлЗркирлЗркЬрк░" -ForegroundColor Green
    Write-Host "================================================" -ForegroundColor Green
    Write-Host ""
    Write-Host "ЁЯУЛ ркХркпрлБркВ ркХрк╛рко ркХрк░рк╡рлБркВ ркЫрлЗ?" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "1я╕ПтГг  ЁЯЪА ркмркзрлА ркПрккрлНрк▓рк┐ркХрлЗрк╢ркирлНрк╕ рк╕рлНркЯрк╛рк░рлНркЯ ркХрк░рлЛ" -ForegroundColor Yellow
    Write-Host "2я╕ПтГг  ЁЯЫС ркмркзрлА ркПрккрлНрк▓рк┐ркХрлЗрк╢ркирлНрк╕ ркмркВркз ркХрк░рлЛ" -ForegroundColor Red
    Write-Host "3я╕ПтГг  ЁЯФН рккрлЛрк░рлНркЯрлНрк╕ рк╕рлНркЯрлЗркЯрк╕ ркЪрлЗркХ ркХрк░рлЛ" -ForegroundColor Blue
    Write-Host "4я╕ПтГг  ЁЯФД ркПрккрлНрк▓рк┐ркХрлЗрк╢ркирлНрк╕ рк░рк┐рк╕рлНркЯрк╛рк░рлНркЯ ркХрк░рлЛ" -ForegroundColor Magenta
    Write-Host "5я╕ПтГг  ЁЯМР ркмрлНрк░рк╛ркЙркЭрк░ркорк╛ркВ ркЦрлЛрк▓рлЛ" -ForegroundColor Green
    Write-Host "6я╕ПтГг  ЁЯУК рк╕рк┐рк╕рлНркЯрко рк╕рлНркЯрлЗркЯрк╕ ркЬрлБркУ" -ForegroundColor White
    Write-Host "0я╕ПтГг  тЭМ ркмрк╣рк╛рк░ ркирлАркХрк│рлЛ" -ForegroundColor Gray
    Write-Host ""
    Write-Host "ркдркорк╛рк░рлА рккрк╕ркВркжркЧрлА рк▓ркЦрлЛ (0-6): " -ForegroundColor Cyan -NoNewline
}

function Start-AllApplications {
    Write-Host ""
    Write-Host "ЁЯЪА ркмркзрлА ркПрккрлНрк▓рк┐ркХрлЗрк╢ркирлНрк╕ рк╕рлНркЯрк╛рк░рлНркЯ ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Green
    Write-Host "================================================" -ForegroundColor Green
    Write-Host ""

    # рк╕рлНркЯрлЗркк 1: ркмркзрк╛ ports kill ркХрк░рк╡рк╛
    Write-Host "ЁЯУЛ рк╕рлНркЯрлЗркк 1: ркмркзрк╛ ports kill ркХрк░рк╡рк╛..." -ForegroundColor Yellow
    Kill-AllPorts

    # рк╕рлНркЯрлЗркк 2: PM2 processes stop ркХрк░рк╡рк╛
    Write-Host "ЁЯУЛ рк╕рлНркЯрлЗркк 2: PM2 processes stop ркХрк░рк╡рк╛..." -ForegroundColor Yellow
    Stop-PM2Processes

    # рк╕рлНркЯрлЗркк 3: Dependencies ркЪрлЗркХ ркХрк░рк╡рк╛
    Write-Host "ЁЯУЛ рк╕рлНркЯрлЗркк 3: Dependencies ркЪрлЗркХ ркХрк░рк╡рк╛..." -ForegroundColor Yellow
    Check-Dependencies

    # рк╕рлНркЯрлЗркк 4: Applications start ркХрк░рк╡рк╛
    Write-Host "ЁЯУЛ рк╕рлНркЯрлЗркк 4: Applications start ркХрк░рк╡рк╛..." -ForegroundColor Yellow
    Start-Applications

    # рк╕рлНркЯрлЗркк 5: Status ркЪрлЗркХ ркХрк░рк╡рк╛
    Write-Host "ЁЯУЛ рк╕рлНркЯрлЗркк 5: Status ркЪрлЗркХ ркХрк░рк╡рк╛..." -ForegroundColor Yellow
    Check-ApplicationStatus

    # рк╕рлНркЯрлЗркк 6: Browser ркорк╛ркВ ркЦрлЛрк▓рк╡рк╛
    Write-Host "ЁЯУЛ рк╕рлНркЯрлЗркк 6: Browser ркорк╛ркВ applications ркЦрлЛрк▓рк╡рк╛..." -ForegroundColor Yellow
    Open-InBrowser

    Write-Host ""
    Write-Host "ЁЯОЙ ркмркзрлА ркПрккрлНрк▓рк┐ркХрлЗрк╢ркирлНрк╕ successfully start ркеркИ ркЧркИ ркЫрлЗ!" -ForegroundColor Green
    Write-Host "================================================" -ForegroundColor Green
    Show-FinalStatus
}

function Stop-AllApplications {
    Write-Host ""
    Write-Host "ЁЯЫС ркмркзрлА ркПрккрлНрк▓рк┐ркХрлЗрк╢ркирлНрк╕ ркмркВркз ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Red
    Write-Host "================================================" -ForegroundColor Red
    Write-Host ""

    # рк╕рлНркЯрлЗркк 1: ркмркзрк╛ ports kill ркХрк░рк╡рк╛
    Write-Host "ЁЯУЛ рк╕рлНркЯрлЗркк 1: ркмркзрк╛ ports kill ркХрк░рк╡рк╛..." -ForegroundColor Yellow
    Kill-AllPorts

    # рк╕рлНркЯрлЗркк 2: PM2 processes stop ркХрк░рк╡рк╛
    Write-Host "ЁЯУЛ рк╕рлНркЯрлЗркк 2: PM2 processes stop ркХрк░рк╡рк╛..." -ForegroundColor Yellow
    Stop-PM2Processes

    # рк╕рлНркЯрлЗркк 3: Node.js processes kill ркХрк░рк╡рк╛
    Write-Host "ЁЯУЛ рк╕рлНркЯрлЗркк 3: Node.js processes kill ркХрк░рк╡рк╛..." -ForegroundColor Yellow
    Kill-NodeProcesses

    Write-Host ""
    Write-Host "тЬЕ ркмркзрлА ркПрккрлНрк▓рк┐ркХрлЗрк╢ркирлНрк╕ successfully ркмркВркз ркХрк░рлА ркжрлЗрк╡рк╛ркорк╛ркВ ркЖрк╡рлА ркЫрлЗ!" -ForegroundColor Green
    Write-Host ""
}

function Check-PortStatus {
    Write-Host ""
    Write-Host "ЁЯФН рккрлЛрк░рлНркЯ рк╕рлНркЯрлЗркЯрк╕ ркЪрлЗркХ ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Blue
    Write-Host "================================================" -ForegroundColor Blue
    Write-Host ""
    Check-ApplicationStatus
    Write-Host ""
}

function Restart-Applications {
    Write-Host ""
    Write-Host "ЁЯФД ркПрккрлНрк▓рк┐ркХрлЗрк╢ркирлНрк╕ рк░рк┐рк╕рлНркЯрк╛рк░рлНркЯ ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Magenta
    Write-Host "================================================" -ForegroundColor Magenta
    Write-Host ""
    
    Stop-AllApplications
    Start-Sleep -Seconds 2
    Start-AllApplications
}

function Open-InBrowser {
    Write-Host "   ЁЯМР ркХркерк╛ рк╕рлЗрк▓рлНрк╕ ркПрккрлНрк▓рк┐ркХрлЗрк╢рки browser ркорк╛ркВ ркЦрлЛрк▓рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрлБркВ" -ForegroundColor Blue
    Start-Process "http://localhost:5173"

    if (Test-Path "school/frontend") {
        Start-Sleep -Seconds 1
        Write-Host "   ЁЯМР рк╕рлНркХрлВрк▓ ркПрккрлНрк▓рк┐ркХрлЗрк╢рки browser ркорк╛ркВ ркЦрлЛрк▓рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрлБркВ" -ForegroundColor Blue
        Start-Process "http://localhost:5180"
    }
}

function Show-SystemStatus {
    Write-Host ""
    Write-Host "ЁЯУК рк╕рк┐рк╕рлНркЯрко рк╕рлНркЯрлЗркЯрк╕" -ForegroundColor White
    Write-Host "================================================" -ForegroundColor White
    Write-Host ""

    # Node.js version
    try {
        $nodeVersion = node --version 2>$null
        Write-Host "   тЬЕ Node.js: $nodeVersion" -ForegroundColor Green
    }
    catch {
        Write-Host "   тЭМ Node.js installed ркиркерлА" -ForegroundColor Red
    }

    # NPM version
    try {
        $npmVersion = npm --version 2>$null
        Write-Host "   тЬЕ NPM: $npmVersion" -ForegroundColor Green
    }
    catch {
        Write-Host "   тЭМ NPM installed ркиркерлА" -ForegroundColor Red
    }

    # PM2 version
    try {
        $pm2Version = pm2 --version 2>$null
        Write-Host "   тЬЕ PM2: $pm2Version" -ForegroundColor Green
    }
    catch {
        Write-Host "   тД╣я╕П  PM2 installed ркиркерлА (optional)" -ForegroundColor Blue
    }

    Write-Host ""
    Write-Host "ЁЯУБ ркбрк┐рк░рлЗркХрлНркЯрк░рлА рк╕рлНркЯрлЗркЯрк╕:" -ForegroundColor Cyan
    
    $directories = @(
        @{Path="backend"; Name="ркХркерк╛ рк╕рлЗрк▓рлНрк╕ ркмрлЗркХркПркирлНркб"},
        @{Path="frontend"; Name="ркХркерк╛ рк╕рлЗрк▓рлНрк╕ рклрлНрк░ркирлНркЯркПркирлНркб"},
        @{Path="school/backend"; Name="рк╕рлНркХрлВрк▓ ркмрлЗркХркПркирлНркб"},
        @{Path="school/frontend"; Name="рк╕рлНркХрлВрк▓ рклрлНрк░ркирлНркЯркПркирлНркб"},
        @{Path="database"; Name="ркбрлЗркЯрк╛ркмрлЗркЭ"}
    )

    foreach ($dir in $directories) {
        if (Test-Path $dir.Path) {
            Write-Host "   тЬЕ $($dir.Name): ркорк│рлНркпрлБркВ" -ForegroundColor Green
        } else {
            Write-Host "   тЭМ $($dir.Name): ркиркерлА ркорк│рлНркпрлБркВ" -ForegroundColor Red
        }
    }

    Write-Host ""
    Check-ApplicationStatus
    Write-Host ""
}

function Kill-AllPorts {
    $portsToKill = @(4000, 4001, 4005, 5173, 5180, 3000, 3001, 3002, 3003, 3004)

    foreach ($port in $portsToKill) {
        try {
            $processes = Get-NetTCPConnection -LocalPort $port -ErrorAction SilentlyContinue | Select-Object -ExpandProperty OwningProcess
            if ($processes) {
                foreach ($pid in $processes) {
                    try {
                        $processName = (Get-Process -Id $pid -ErrorAction SilentlyContinue).ProcessName
                        Write-Host "   ЁЯФ┤ Port $port рккрк░ $processName (PID: $pid) kill ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрлБркВ" -ForegroundColor Red
                        Stop-Process -Id $pid -Force -ErrorAction SilentlyContinue
                    }
                    catch {
                        Write-Host "   тЪая╕П  Port $port рккрк░ process kill ркХрк░рк╡рк╛ркорк╛ркВ error" -ForegroundColor Yellow
                    }
                }
            } else {
                Write-Host "   тЬЕ Port $port рккрк░ ркХрлЛркИ process ркиркерлА" -ForegroundColor Green
            }
        }
        catch {
            Write-Host "   тЪая╕П  Port $port ркЪрлЗркХ ркХрк░рк╡рк╛ркорк╛ркВ error" -ForegroundColor Yellow
        }
    }
}

function Stop-PM2Processes {
    try {
        $pm2Check = Get-Command pm2 -ErrorAction SilentlyContinue
        if ($pm2Check) {
            Write-Host "   ЁЯФ┤ ркмркзрк╛ PM2 processes stop ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрк╛" -ForegroundColor Red
            pm2 stop all 2>$null
            pm2 delete all 2>$null
        } else {
            Write-Host "   тД╣я╕П  PM2 installed ркиркерлА, skip ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрлБркВ" -ForegroundColor Blue
        }
    }
    catch {
        Write-Host "   тЪая╕П  PM2 stop ркХрк░рк╡рк╛ркорк╛ркВ error" -ForegroundColor Yellow
    }
}

function Kill-NodeProcesses {
    try {
        $nodeProcesses = Get-Process -Name "node" -ErrorAction SilentlyContinue
        if ($nodeProcesses) {
            foreach ($process in $nodeProcesses) {
                Write-Host "   ЁЯФ┤ Node.js process (PID: $($process.Id)) kill ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрлБркВ" -ForegroundColor Red
                Stop-Process -Id $process.Id -Force -ErrorAction SilentlyContinue
            }
        } else {
            Write-Host "   тЬЕ ркХрлЛркИ Node.js process ркиркерлА" -ForegroundColor Green
        }
    }
    catch {
        Write-Host "   тЪая╕П  Node.js processes kill ркХрк░рк╡рк╛ркорк╛ркВ error" -ForegroundColor Yellow
    }
}

function Check-Dependencies {
    # Backend dependencies
    if (Test-Path "backend/package.json") {
        if (-not (Test-Path "backend/node_modules")) {
            Write-Host "   ЁЯУж Backend dependencies install ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрк╛" -ForegroundColor Blue
            Set-Location backend
            npm install --silent
            Set-Location ..
        } else {
            Write-Host "   тЬЕ Backend dependencies ready ркЫрлЗ" -ForegroundColor Green
        }
    } else {
        Write-Host "   тЭМ Backend package.json ркорк│рлНркпрлБркВ ркиркерлА" -ForegroundColor Red
    }

    # Frontend dependencies
    if (Test-Path "frontend/package.json") {
        if (-not (Test-Path "frontend/node_modules")) {
            Write-Host "   ЁЯУж Frontend dependencies install ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрк╛" -ForegroundColor Blue
            Set-Location frontend
            npm install --silent
            Set-Location ..
        } else {
            Write-Host "   тЬЕ Frontend dependencies ready ркЫрлЗ" -ForegroundColor Green
        }
    } else {
        Write-Host "   тЭМ Frontend package.json ркорк│рлНркпрлБркВ ркиркерлА" -ForegroundColor Red
    }
}

function Start-Applications {
    # Create logs directory if not exists
    if (-not (Test-Path "logs")) {
        New-Item -ItemType Directory -Path "logs" -Force | Out-Null
    }

    # Start Katha Sales Backend
    Write-Host "   ЁЯЪА ркХркерк╛ рк╕рлЗрк▓рлНрк╕ ркмрлЗркХркПркирлНркб start ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрлБркВ (Port: 4000)" -ForegroundColor Green
    Start-Process powershell -ArgumentList "-NoExit", "-Command", "cd '$PWD\backend'; node index.cjs" -WindowStyle Minimized

    # Wait a bit for backend to start
    Start-Sleep -Seconds 3

    # Start Katha Sales Frontend
    Write-Host "   ЁЯЪА ркХркерк╛ рк╕рлЗрк▓рлНрк╕ рклрлНрк░ркирлНркЯркПркирлНркб start ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрлБркВ (Port: 5173)" -ForegroundColor Green
    Start-Process powershell -ArgumentList "-NoExit", "-Command", "cd '$PWD\frontend'; npm run dev" -WindowStyle Minimized

    # Check if school application exists
    if (Test-Path "school/backend") {
        # Start School Backend
        Write-Host "   ЁЯЪА рк╕рлНркХрлВрк▓ ркмрлЗркХркПркирлНркб start ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрлБркВ (Port: 4001)" -ForegroundColor Green
        Start-Process powershell -ArgumentList "-NoExit", "-Command", "cd '$PWD\school\backend'; node index.cjs" -WindowStyle Minimized
        
        # Wait a bit for school backend to start
        Start-Sleep -Seconds 3
        
        # Start School Frontend
        if (Test-Path "school/frontend") {
            Write-Host "   ЁЯЪА рк╕рлНркХрлВрк▓ рклрлНрк░ркирлНркЯркПркирлНркб start ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрлБркВ (Port: 5180)" -ForegroundColor Green
            Start-Process powershell -ArgumentList "-NoExit", "-Command", "cd '$PWD\school\frontend'; npm run dev" -WindowStyle Minimized
        }
    }
}

function Check-ApplicationStatus {
    Start-Sleep -Seconds 3

    $portsToCheck = @(
        @{Port=4000; Name="ркХркерк╛ рк╕рлЗрк▓рлНрк╕ ркмрлЗркХркПркирлНркб"; URL="http://localhost:4000"},
        @{Port=5173; Name="ркХркерк╛ рк╕рлЗрк▓рлНрк╕ рклрлНрк░ркирлНркЯркПркирлНркб"; URL="http://localhost:5173"},
        @{Port=4001; Name="рк╕рлНркХрлВрк▓ ркмрлЗркХркПркирлНркб"; URL="http://localhost:4001"},
        @{Port=5180; Name="рк╕рлНркХрлВрк▓ рклрлНрк░ркирлНркЯркПркирлНркб"; URL="http://localhost:5180"}
    )

    foreach ($app in $portsToCheck) {
        try {
            $connection = Test-NetConnection -ComputerName localhost -Port $app.Port -InformationLevel Quiet -WarningAction SilentlyContinue
            if ($connection) {
                Write-Host "   тЬЕ $($app.Name) ркЪрк╛рк▓рлБ ркЫрлЗ - $($app.URL)" -ForegroundColor Green
            } else {
                Write-Host "   тЭМ $($app.Name) ркЪрк╛рк▓рлБ ркиркерлА - $($app.URL)" -ForegroundColor Red
            }
        }
        catch {
            Write-Host "   тЭМ $($app.Name) ркЪрлЗркХ ркХрк░рк╡рк╛ркорк╛ркВ error - $($app.URL)" -ForegroundColor Red
        }
    }
}

function Show-FinalStatus {
    Write-Host ""
    Write-Host "ЁЯУ▒ ркПрккрлНрк▓рк┐ркХрлЗрк╢рки URLs:" -ForegroundColor Cyan
    Write-Host "   тАв ркХркерк╛ рк╕рлЗрк▓рлНрк╕: http://localhost:5173" -ForegroundColor White
    Write-Host "   тАв рк╕рлНркХрлВрк▓ ркПрккрлНрк▓рк┐ркХрлЗрк╢рки: http://localhost:5180" -ForegroundColor White
    Write-Host ""
    Write-Host "ЁЯФз API Endpoints:" -ForegroundColor Cyan
    Write-Host "   тАв ркХркерк╛ рк╕рлЗрк▓рлНрк╕ API: http://localhost:4000" -ForegroundColor White
    Write-Host "   тАв рк╕рлНркХрлВрк▓ API: http://localhost:4001" -ForegroundColor White
    Write-Host ""
    Write-Host "тЪая╕П  ркирлЛркВркз:" -ForegroundColor Yellow
    Write-Host "   тАв ркмркзрлА applications ркЕрк▓ркЧ terminal windows ркорк╛ркВ ркЪрк╛рк▓рлБ ркЫрлЗ" -ForegroundColor White
    Write-Host "   тАв ркХрлЛркИ error ркЖрк╡рлЗ ркдрлЛ terminal windows ркЪрлЗркХ ркХрк░рлЛ" -ForegroundColor White
    Write-Host "   тАв Applications ркмркВркз ркХрк░рк╡рк╛ ркорк╛ркЯрлЗ terminal windows ркмркВркз ркХрк░рлЛ" -ForegroundColor White
    Write-Host ""
}

# ========================================
# ркорлБркЦрлНркп ркорлЗркирлБ рк▓рлВркк
# ========================================

do {
    Show-Menu
    $choice = Read-Host

    switch ($choice) {
        "1" { 
            Start-AllApplications
            Write-Host ""
            Write-Host "Press any key to continue..." -ForegroundColor Gray
            $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        }
        "2" { 
            Stop-AllApplications
            Write-Host ""
            Write-Host "Press any key to continue..." -ForegroundColor Gray
            $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        }
        "3" { 
            Check-PortStatus
            Write-Host ""
            Write-Host "Press any key to continue..." -ForegroundColor Gray
            $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        }
        "4" { 
            Restart-Applications
            Write-Host ""
            Write-Host "Press any key to continue..." -ForegroundColor Gray
            $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        }
        "5" { 
            Open-InBrowser
            Write-Host ""
            Write-Host "Press any key to continue..." -ForegroundColor Gray
            $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        }
        "6" { 
            Show-SystemStatus
            Write-Host ""
            Write-Host "Press any key to continue..." -ForegroundColor Gray
            $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        }
        "0" { 
            Write-Host ""
            Write-Host "ЁЯСЛ ркзркирлНркпрк╡рк╛ркж! ркмрк╣рк╛рк░ ркирлАркХрк│рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Green
            exit
        }
        default { 
            Write-Host ""
            Write-Host "тЭМ ркЧрк▓ркд рккрк╕ркВркжркЧрлА! ркХрлГрккрк╛ ркХрк░рлА 0-6 ркорк╛ркВркерлА ркХрлЛркИ ркПркХ ркиркВркмрк░ рк▓ркЦрлЛ." -ForegroundColor Red
            Start-Sleep -Seconds 2
        }
    }
} while ($true) 