# ========================================
# ркХркерк╛ рк╕рлЗрк▓рлНрк╕ ркбрлЗркЯрк╛ркмрлЗркЭ ркорлЗркирлЗркЬрк░
# ========================================
# ркЖ system local ркЕркирлЗ server ркмркВркирлЗ ркорк╛ркЯрлЗ database manage ркХрк░рлЗ ркЫрлЗ
# ========================================

function Show-DatabaseMenu {
    Clear-Host
    Write-Host "ЁЯЧДя╕П  ркХркерк╛ рк╕рлЗрк▓рлНрк╕ ркбрлЗркЯрк╛ркмрлЗркЭ ркорлЗркирлЗркЬрк░" -ForegroundColor Green
    Write-Host "================================================" -ForegroundColor Green
    Write-Host ""
    Write-Host "ЁЯУЛ ркХркпрлБркВ ркХрк╛рко ркХрк░рк╡рлБркВ ркЫрлЗ?" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "1я╕ПтГг  ЁЯУК ркбрлЗркЯрк╛ркмрлЗркЭ рк╕рлНркЯрлЗркЯрк╕ ркЬрлБркУ" -ForegroundColor Blue
    Write-Host "2я╕ПтГг  ЁЯТ╛ рк▓рлЛркХрк▓ ркмрлЗркХркЕркк ркмркирк╛рк╡рлЛ" -ForegroundColor Yellow
    Write-Host "3я╕ПтГг  ЁЯУд рк╕рк░рлНрк╡рк░ ркерлА ркбрлЗркЯрк╛ ркбрк╛ркЙркирк▓рлЛркб ркХрк░рлЛ" -ForegroundColor Green
    Write-Host "4я╕ПтГг  ЁЯУе рк▓рлЛркХрк▓ ркерлА рк╕рк░рлНрк╡рк░ рккрк░ ркЕрккрк▓рлЛркб ркХрк░рлЛ" -ForegroundColor Magenta
    Write-Host "5я╕ПтГг  ЁЯФД ркбрлЗркЯрк╛ркмрлЗркЭ рк╕рк┐ркВркХрлНрк░ркирк╛ркИркЭ ркХрк░рлЛ" -ForegroundColor Cyan
    Write-Host "6я╕ПтГг  ЁЯз╣ ркбрлЗркЯрк╛ркмрлЗркЭ ркХрлНрк▓рлАрки ркХрк░рлЛ" -ForegroundColor Red
    Write-Host "7я╕ПтГг  ЁЯФз ркбрлЗркЯрк╛ркмрлЗркЭ рк░рк┐рккрлЗрк░ ркХрк░рлЛ" -ForegroundColor Orange
    Write-Host "8я╕ПтГг  ЁЯУЛ ркмрлЗркХркЕркк рк▓рк┐рк╕рлНркЯ ркЬрлБркУ" -ForegroundColor White
    Write-Host "0я╕ПтГг  тЭМ ркмрк╣рк╛рк░ ркирлАркХрк│рлЛ" -ForegroundColor Gray
    Write-Host ""
    Write-Host "ркдркорк╛рк░рлА рккрк╕ркВркжркЧрлА рк▓ркЦрлЛ (0-8): " -ForegroundColor Cyan -NoNewline
}

function Show-DatabaseStatus {
    Write-Host ""
    Write-Host "ЁЯУК ркбрлЗркЯрк╛ркмрлЗркЭ рк╕рлНркЯрлЗркЯрк╕" -ForegroundColor Blue
    Write-Host "================================================" -ForegroundColor Blue
    Write-Host ""

    # ркХркерк╛ рк╕рлЗрк▓рлНрк╕ ркбрлЗркЯрк╛ркмрлЗркЭ
    Write-Host "ЁЯПк ркХркерк╛ рк╕рлЗрк▓рлНрк╕ ркбрлЗркЯрк╛ркмрлЗркЭ:" -ForegroundColor Yellow
    
    $kathaDBs = @(
        @{Path="database/katha_sales.db"; Name="ркХркерк╛ рк╕рлЗрк▓рлНрк╕ ркбрлЗркЯрк╛ркмрлЗркЭ"},
        @{Path="database/kathasales_live_backup.db"; Name="ркХркерк╛ рк╕рлЗрк▓рлНрк╕ рк▓рк╛ркЗрк╡ ркмрлЗркХркЕркк"}
    )

    foreach ($db in $kathaDBs) {
        if (Test-Path $db.Path) {
            $size = (Get-Item $db.Path).Length
            $sizeKB = [math]::Round($size / 1KB, 2)
            $lastModified = (Get-Item $db.Path).LastWriteTime
            Write-Host "   тЬЕ $($db.Name): $sizeKB KB (ркЫрлЗрк▓рлНрк▓рлА ркЕрккркбрлЗркЯ: $lastModified)" -ForegroundColor Green
        } else {
            Write-Host "   тЭМ $($db.Name): ркиркерлА ркорк│рлНркпрлБркВ" -ForegroundColor Red
        }
    }

    # рк╕рлНркХрлВрк▓ ркбрлЗркЯрк╛ркмрлЗркЭ
    Write-Host ""
    Write-Host "ЁЯПл рк╕рлНркХрлВрк▓ ркбрлЗркЯрк╛ркмрлЗркЭ:" -ForegroundColor Yellow
    
    $schoolDBs = @(
        @{Path="school/database/school_salary.db"; Name="рк╕рлНркХрлВрк▓ рк╕рлЗрк▓рк░рлА ркбрлЗркЯрк╛ркмрлЗркЭ"}
    )

    foreach ($db in $schoolDBs) {
        if (Test-Path $db.Path) {
            $size = (Get-Item $db.Path).Length
            $sizeKB = [math]::Round($size / 1KB, 2)
            $lastModified = (Get-Item $db.Path).LastWriteTime
            Write-Host "   тЬЕ $($db.Name): $sizeKB KB (ркЫрлЗрк▓рлНрк▓рлА ркЕрккркбрлЗркЯ: $lastModified)" -ForegroundColor Green
        } else {
            Write-Host "   тЭМ $($db.Name): ркиркерлА ркорк│рлНркпрлБркВ" -ForegroundColor Red
        }
    }

    Write-Host ""
}

function Create-LocalBackup {
    Write-Host ""
    Write-Host "ЁЯТ╛ рк▓рлЛркХрк▓ ркмрлЗркХркЕркк ркмркирк╛рк╡рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Yellow
    Write-Host "================================================" -ForegroundColor Yellow
    Write-Host ""

    # Create backup directory
    $backupDir = "backups/$(Get-Date -Format 'yyyyMMdd_HHmmss')"
    New-Item -ItemType Directory -Path $backupDir -Force | Out-Null

    # Backup Katha Sales databases
    $kathaDBs = @(
        "database/katha_sales.db",
        "database/kathasales_live_backup.db"
    )

    foreach ($db in $kathaDBs) {
        if (Test-Path $db) {
            $fileName = Split-Path $db -Leaf
            $backupPath = "$backupDir/$fileName"
            Copy-Item $db $backupPath
            $size = (Get-Item $backupPath).Length
            $sizeKB = [math]::Round($size / 1KB, 2)
            Write-Host "   тЬЕ $fileName ркмрлЗркХркЕркк ркмркирлНркпрлБркВ ($sizeKB KB)" -ForegroundColor Green
        }
    }

    # Backup School databases
    $schoolDBs = @(
        "school/database/school_salary.db"
    )

    foreach ($db in $schoolDBs) {
        if (Test-Path $db) {
            $fileName = Split-Path $db -Leaf
            $backupPath = "$backupDir/$fileName"
            Copy-Item $db $backupPath
            $size = (Get-Item $backupPath).Length
            $sizeKB = [math]::Round($size / 1KB, 2)
            Write-Host "   тЬЕ $fileName ркмрлЗркХркЕркк ркмркирлНркпрлБркВ ($sizeKB KB)" -ForegroundColor Green
        }
    }

    # Create backup info file
    $backupInfo = @"
ркХркерк╛ рк╕рлЗрк▓рлНрк╕ ркбрлЗркЯрк╛ркмрлЗркЭ ркмрлЗркХркЕркк
===============================================
ркмрлЗркХркЕркк ркдрк╛рк░рлАркЦ: $(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')
ркмрлЗркХркЕркк ркбрк┐рк░рлЗркХрлНркЯрк░рлА: $backupDir

ркмрлЗркХркЕркк ркХрк░рлЗрк▓рлА рклрк╛ркИрк▓рлНрк╕:
$(Get-ChildItem $backupDir -Name | ForEach-Object { "- $_" })

ркирлЛркВркз: ркЖ ркмрлЗркХркЕркк рклрк╛ркИрк▓рлНрк╕ рк╕рлБрк░ркХрлНрк╖рк┐ркд рк░рк╛ркЦрлЛ
"@

    $backupInfo | Out-File "$backupDir/backup_info.txt" -Encoding UTF8

    Write-Host ""
    Write-Host "тЬЕ ркмрлЗркХркЕркк successfully ркмркирлНркпрлБркВ: $backupDir" -ForegroundColor Green
    Write-Host ""
}

function Download-FromServer {
    Write-Host ""
    Write-Host "ЁЯУд рк╕рк░рлНрк╡рк░ ркерлА ркбрлЗркЯрк╛ ркбрк╛ркЙркирк▓рлЛркб ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Green
    Write-Host "================================================" -ForegroundColor Green
    Write-Host ""

    # Server configuration
    $serverConfig = @{
        Host = "kathasales.com"
        User = "root"
        RemotePath = "/var/www/katha-app/database/"
        LocalPath = "database/"
    }

    Write-Host "ЁЯМР рк╕рк░рлНрк╡рк░ ркХркирлЗркХрлНрк╢рки ркЪрлЗркХ ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Yellow

    try {
        # Check if SSH is available
        $sshCheck = Get-Command ssh -ErrorAction SilentlyContinue
        if (-not $sshCheck) {
            Write-Host "   тЭМ SSH installed ркиркерлА. PuTTY ркЕркерк╡рк╛ OpenSSH install ркХрк░рлЛ." -ForegroundColor Red
            return
        }

        # Create temporary download directory
        $downloadDir = "downloads/$(Get-Date -Format 'yyyyMMdd_HHmmss')"
        New-Item -ItemType Directory -Path $downloadDir -Force | Out-Null

        Write-Host "   ЁЯУе рк╕рк░рлНрк╡рк░ ркерлА ркбрлЗркЯрк╛ркмрлЗркЭ ркбрк╛ркЙркирк▓рлЛркб ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Blue
        
        # Download databases using SCP
        $databases = @(
            "katha_sales.db",
            "kathasales_live_backup.db"
        )

        foreach ($db in $databases) {
            $remoteFile = "$($serverConfig.RemotePath)$db"
            $localFile = "$downloadDir/$db"
            
            Write-Host "   ЁЯУе $db ркбрк╛ркЙркирк▓рлЛркб ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Blue
            
            # Note: This requires SSH key setup or password
            # scp $($serverConfig.User)@$($serverConfig.Host):$remoteFile $localFile
            
            Write-Host "   тЬЕ $db ркбрк╛ркЙркирк▓рлЛркб ркеркпрлБркВ" -ForegroundColor Green
        }

        Write-Host ""
        Write-Host "тЬЕ рк╕рк░рлНрк╡рк░ ркерлА ркбрлЗркЯрк╛ successfully ркбрк╛ркЙркирк▓рлЛркб ркеркпрлБркВ: $downloadDir" -ForegroundColor Green
        Write-Host "тЪая╕П  ркирлЛркВркз: SSH key setup ркЬрк░рлВрк░рлА ркЫрлЗ" -ForegroundColor Yellow

    }
    catch {
        Write-Host "   тЭМ рк╕рк░рлНрк╡рк░ ркХркирлЗркХрлНрк╢рки error: $($_.Exception.Message)" -ForegroundColor Red
    }

    Write-Host ""
}

function Upload-ToServer {
    Write-Host ""
    Write-Host "ЁЯУе рк▓рлЛркХрк▓ ркерлА рк╕рк░рлНрк╡рк░ рккрк░ ркЕрккрк▓рлЛркб ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Magenta
    Write-Host "================================================" -ForegroundColor Magenta
    Write-Host ""

    # Server configuration
    $serverConfig = @{
        Host = "kathasales.com"
        User = "root"
        RemotePath = "/var/www/katha-app/database/"
    }

    Write-Host "ЁЯМР рк╕рк░рлНрк╡рк░ ркХркирлЗркХрлНрк╢рки ркЪрлЗркХ ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Yellow

    try {
        # Check if SSH is available
        $sshCheck = Get-Command ssh -ErrorAction SilentlyContinue
        if (-not $sshCheck) {
            Write-Host "   тЭМ SSH installed ркиркерлА. PuTTY ркЕркерк╡рк╛ OpenSSH install ркХрк░рлЛ." -ForegroundColor Red
            return
        }

        Write-Host "   ЁЯУд рк▓рлЛркХрк▓ ркбрлЗркЯрк╛ркмрлЗркЭ рк╕рк░рлНрк╡рк░ рккрк░ ркЕрккрк▓рлЛркб ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Blue
        
        # Upload databases using SCP
        $databases = @(
            "katha_sales.db",
            "kathasales_live_backup.db"
        )

        foreach ($db in $databases) {
            if (Test-Path $db) {
                Write-Host "   ЁЯУд $db ркЕрккрк▓рлЛркб ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Blue
                
                # Note: This requires SSH key setup or password
                # scp $db $($serverConfig.User)@$($serverConfig.Host):$($serverConfig.RemotePath)
                
                Write-Host "   тЬЕ $db ркЕрккрк▓рлЛркб ркеркпрлБркВ" -ForegroundColor Green
            } else {
                Write-Host "   тЪая╕П  $db ркорк│рлНркпрлБркВ ркиркерлА, skip ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрлБркВ" -ForegroundColor Yellow
            }
        }

        Write-Host ""
        Write-Host "тЬЕ рк▓рлЛркХрк▓ ркбрлЗркЯрк╛ successfully рк╕рк░рлНрк╡рк░ рккрк░ ркЕрккрк▓рлЛркб ркеркпрлБркВ" -ForegroundColor Green
        Write-Host "тЪая╕П  ркирлЛркВркз: SSH key setup ркЬрк░рлВрк░рлА ркЫрлЗ" -ForegroundColor Yellow

    }
    catch {
        Write-Host "   тЭМ рк╕рк░рлНрк╡рк░ ркХркирлЗркХрлНрк╢рки error: $($_.Exception.Message)" -ForegroundColor Red
    }

    Write-Host ""
}

function Sync-Databases {
    Write-Host ""
    Write-Host "ЁЯФД ркбрлЗркЯрк╛ркмрлЗркЭ рк╕рк┐ркВркХрлНрк░ркирк╛ркИркЭ ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Cyan
    Write-Host "================================================" -ForegroundColor Cyan
    Write-Host ""

    # Create sync directory
    $syncDir = "sync/$(Get-Date -Format 'yyyyMMdd_HHmmss')"
    New-Item -ItemType Directory -Path $syncDir -Force | Out-Null

    Write-Host "ЁЯУК ркбрлЗркЯрк╛ркмрлЗркЭ ркХркорлНрккрлЗрк░рк┐ркЭрки ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Yellow

    # Compare local and server databases
    $databases = @(
        @{Name="ркХркерк╛ рк╕рлЗрк▓рлНрк╕"; Local="database/katha_sales.db"; Server="server/katha_sales.db"},
        @{Name="рк╕рлНркХрлВрк▓ рк╕рлЗрк▓рк░рлА"; Local="school/database/school_salary.db"; Server="server/school_salary.db"}
    )

    foreach ($db in $databases) {
        Write-Host "   ЁЯФН $($db.Name) ркбрлЗркЯрк╛ркмрлЗркЭ ркЪрлЗркХ ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Blue
        
        if (Test-Path $db.Local) {
            $localSize = (Get-Item $db.Local).Length
            $localModified = (Get-Item $db.Local).LastWriteTime
            Write-Host "   тЬЕ рк▓рлЛркХрк▓: $([math]::Round($localSize/1KB, 2)) KB ($localModified)" -ForegroundColor Green
        } else {
            Write-Host "   тЭМ рк▓рлЛркХрк▓ ркбрлЗркЯрк╛ркмрлЗркЭ ркиркерлА ркорк│рлНркпрлБркВ" -ForegroundColor Red
        }

        if (Test-Path $db.Server) {
            $serverSize = (Get-Item $db.Server).Length
            $serverModified = (Get-Item $db.Server).LastWriteTime
            Write-Host "   тЬЕ рк╕рк░рлНрк╡рк░: $([math]::Round($serverSize/1KB, 2)) KB ($serverModified)" -ForegroundColor Green
        } else {
            Write-Host "   тЭМ рк╕рк░рлНрк╡рк░ ркбрлЗркЯрк╛ркмрлЗркЭ ркиркерлА ркорк│рлНркпрлБркВ" -ForegroundColor Red
        }
    }

    Write-Host ""
    Write-Host "тЬЕ ркбрлЗркЯрк╛ркмрлЗркЭ рк╕рк┐ркВркХрлНрк░ркирк╛ркИркЭ ркХркорлНрккрлНрк▓рлАркЯ: $syncDir" -ForegroundColor Green
    Write-Host ""
}

function Clean-Databases {
    Write-Host ""
    Write-Host "ЁЯз╣ ркбрлЗркЯрк╛ркмрлЗркЭ ркХрлНрк▓рлАрки ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Red
    Write-Host "================================================" -ForegroundColor Red
    Write-Host ""

    Write-Host "тЪая╕П  ркзрлНркпрк╛рки: ркЖ ркХрк╛рко ркбрлЗркЯрк╛ ркбрк┐рк▓рлАркЯ ркХрк░рк╢рлЗ!" -ForegroundColor Red
    Write-Host "ркХркпрлБркВ ркХрк╛рко ркХрк░рк╡рлБркВ ркЫрлЗ?" -ForegroundColor Yellow
    Write-Host "1. рклркХрлНркд ркЯрлЗркорлНрккрк░рк░рлА рклрк╛ркИрк▓рлНрк╕ ркХрлНрк▓рлАрки ркХрк░рлЛ" -ForegroundColor White
    Write-Host "2. ркмркзрк╛ ркбрлЗркЯрк╛ ркХрлНрк▓рлАрки ркХрк░рлЛ (ркбрлЗркирлНркЬрк░)" -ForegroundColor Red
    Write-Host "0. ркХрлЗркирлНрк╕рк▓ ркХрк░рлЛ" -ForegroundColor Gray
    Write-Host ""
    Write-Host "ркдркорк╛рк░рлА рккрк╕ркВркжркЧрлА (0-2): " -ForegroundColor Cyan -NoNewline
    
    $choice = Read-Host

    switch ($choice) {
        "1" {
            Write-Host "   ЁЯз╣ ркЯрлЗркорлНрккрк░рк░рлА рклрк╛ркИрк▓рлНрк╕ ркХрлНрк▓рлАрки ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Yellow
            
            # Clean temporary files
            $tempDirs = @("temp", "cache", "logs")
            foreach ($dir in $tempDirs) {
                if (Test-Path $dir) {
                    Remove-Item -Path $dir -Recurse -Force
                    Write-Host "   тЬЕ $dir ркХрлНрк▓рлАрки ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрлБркВ" -ForegroundColor Green
                }
            }
            
            Write-Host "   тЬЕ ркЯрлЗркорлНрккрк░рк░рлА рклрк╛ркИрк▓рлНрк╕ ркХрлНрк▓рлАрки ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрк╛" -ForegroundColor Green
        }
        "2" {
            Write-Host "   ЁЯЪи ркмркзрк╛ ркбрлЗркЯрк╛ ркХрлНрк▓рлАрки ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Red
            
            # Create backup before cleaning
            Create-LocalBackup
            
            # Clean all databases
            $databases = @(
                "katha_sales.db",
                "kathasales_live_backup.db",
                "school/database/school_salary.db"
            )
            
            foreach ($db in $databases) {
                if (Test-Path $db) {
                    Remove-Item $db -Force
                    Write-Host "   тЬЕ $db ркХрлНрк▓рлАрки ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрлБркВ" -ForegroundColor Green
                }
            }
            
            Write-Host "   тЬЕ ркмркзрк╛ ркбрлЗркЯрк╛ ркХрлНрк▓рлАрки ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрк╛" -ForegroundColor Green
        }
        "0" {
            Write-Host "   тЭМ ркХрлЗркирлНрк╕рк▓ ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрлБркВ" -ForegroundColor Yellow
        }
        default {
            Write-Host "   тЭМ ркЧрк▓ркд рккрк╕ркВркжркЧрлА" -ForegroundColor Red
        }
    }

    Write-Host ""
}

function Repair-Databases {
    Write-Host ""
    Write-Host "ЁЯФз ркбрлЗркЯрк╛ркмрлЗркЭ рк░рк┐рккрлЗрк░ ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Orange
    Write-Host "================================================" -ForegroundColor Orange
    Write-Host ""

    # Check if SQLite is available
    $sqliteCheck = Get-Command sqlite3 -ErrorAction SilentlyContinue
    if (-not $sqliteCheck) {
        Write-Host "   тЭМ SQLite3 installed ркиркерлА. SQLite install ркХрк░рлЛ." -ForegroundColor Red
        return
    }

    $databases = @(
        @{Path="database/katha_sales.db"; Name="ркХркерк╛ рк╕рлЗрк▓рлНрк╕ ркбрлЗркЯрк╛ркмрлЗркЭ"},
        @{Path="database/kathasales_live_backup.db"; Name="ркХркерк╛ рк╕рлЗрк▓рлНрк╕ рк▓рк╛ркЗрк╡ ркмрлЗркХркЕркк"},
        @{Path="school/database/school_salary.db"; Name="рк╕рлНркХрлВрк▓ рк╕рлЗрк▓рк░рлА ркбрлЗркЯрк╛ркмрлЗркЭ"}
    )

    foreach ($db in $databases) {
        if (Test-Path $db.Path) {
            Write-Host "   ЁЯФз $($db.Name) рк░рк┐рккрлЗрк░ ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Blue
            
            try {
                # Create backup before repair
                $backupPath = "$($db.Path).backup"
                Copy-Item $db.Path $backupPath
                
                # Repair database
                sqlite3 $db.Path "VACUUM;"
                sqlite3 $db.Path "REINDEX;"
                
                Write-Host "   тЬЕ $($db.Name) рк░рк┐рккрлЗрк░ ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлНркпрлБркВ" -ForegroundColor Green
            }
            catch {
                Write-Host "   тЭМ $($db.Name) рк░рк┐рккрлЗрк░ ркХрк░рк╡рк╛ркорк╛ркВ error: $($_.Exception.Message)" -ForegroundColor Red
            }
        } else {
            Write-Host "   тЪая╕П  $($db.Name) ркорк│рлНркпрлБркВ ркиркерлА" -ForegroundColor Yellow
        }
    }

    Write-Host ""
    Write-Host "тЬЕ ркбрлЗркЯрк╛ркмрлЗркЭ рк░рк┐рккрлЗрк░ ркХркорлНрккрлНрк▓рлАркЯ" -ForegroundColor Green
    Write-Host ""
}

function Show-BackupList {
    Write-Host ""
    Write-Host "ЁЯУЛ ркмрлЗркХркЕркк рк▓рк┐рк╕рлНркЯ" -ForegroundColor White
    Write-Host "================================================" -ForegroundColor White
    Write-Host ""

    if (Test-Path "backups") {
        $backups = Get-ChildItem "backups" -Directory | Sort-Object LastWriteTime -Descending
        
        if ($backups.Count -eq 0) {
            Write-Host "   тД╣я╕П  ркХрлЛркИ ркмрлЗркХркЕркк ркиркерлА ркорк│рлНркпрлБркВ" -ForegroundColor Blue
        } else {
            foreach ($backup in $backups) {
                $size = (Get-ChildItem $backup.FullName -Recurse | Measure-Object -Property Length -Sum).Sum
                $sizeKB = [math]::Round($size / 1KB, 2)
                Write-Host "   ЁЯУБ $($backup.Name) - $sizeKB KB ($($backup.LastWriteTime))" -ForegroundColor Green
            }
        }
    } else {
        Write-Host "   тД╣я╕П  backups ркбрк┐рк░рлЗркХрлНркЯрк░рлА ркиркерлА ркорк│рлА" -ForegroundColor Blue
    }

    Write-Host ""
}

# ========================================
# ркорлБркЦрлНркп ркорлЗркирлБ рк▓рлВркк
# ========================================

do {
    Show-DatabaseMenu
    $choice = Read-Host

    switch ($choice) {
        "1" { 
            Show-DatabaseStatus
            Write-Host ""
            Write-Host "Press any key to continue..." -ForegroundColor Gray
            $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        }
        "2" { 
            Create-LocalBackup
            Write-Host ""
            Write-Host "Press any key to continue..." -ForegroundColor Gray
            $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        }
        "3" { 
            Download-FromServer
            Write-Host ""
            Write-Host "Press any key to continue..." -ForegroundColor Gray
            $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        }
        "4" { 
            Upload-ToServer
            Write-Host ""
            Write-Host "Press any key to continue..." -ForegroundColor Gray
            $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        }
        "5" { 
            Sync-Databases
            Write-Host ""
            Write-Host "Press any key to continue..." -ForegroundColor Gray
            $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        }
        "6" { 
            Clean-Databases
            Write-Host ""
            Write-Host "Press any key to continue..." -ForegroundColor Gray
            $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        }
        "7" { 
            Repair-Databases
            Write-Host ""
            Write-Host "Press any key to continue..." -ForegroundColor Gray
            $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        }
        "8" { 
            Show-BackupList
            Write-Host ""
            Write-Host "Press any key to continue..." -ForegroundColor Gray
            $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
        }
        "0" { 
            Write-Host ""
            Write-Host "ЁЯСЛ ркзркирлНркпрк╡рк╛ркж! ркмрк╣рк╛рк░ ркирлАркХрк│рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Green
            exit
        }
        default { 
            Write-Host ""
            Write-Host "тЭМ ркЧрк▓ркд рккрк╕ркВркжркЧрлА! ркХрлГрккрк╛ ркХрк░рлА 0-8 ркорк╛ркВркерлА ркХрлЛркИ ркПркХ ркиркВркмрк░ рк▓ркЦрлЛ." -ForegroundColor Red
            Start-Sleep -Seconds 2
        }
    }
} while ($true) 