# ========================================
# ркбрлЗркЯрк╛ркмрлЗркЭ рк╕рк┐ркВркХрлНрк░ркирк╛ркИркЭрлЗрк╢рки рк╕рлНркХрлНрк░рк┐рккрлНркЯ
# ========================================
# ркЖ script local ркЕркирлЗ server рк╡ркЪрлНркЪрлЗ database sync ркХрк░рлЗ ркЫрлЗ
# ========================================

param(
    [string]$Action = "sync",  # sync, backup, restore
    [string]$Environment = "local"  # local, server
)

# Configuration
$config = @{
    LocalPath = "database/"
    ServerPath = "/var/www/katha-app/database/"
    ServerHost = "kathasales.com"
    ServerUser = "root"
    BackupPath = "backups/"
    SyncPath = "sync/"
}

function Write-Header {
    param([string]$Title)
    Write-Host ""
    Write-Host "================================================" -ForegroundColor Green
    Write-Host $Title -ForegroundColor Green
    Write-Host "================================================" -ForegroundColor Green
    Write-Host ""
}

function Test-SSHConnection {
    try {
        $sshCheck = Get-Command ssh -ErrorAction SilentlyContinue
        if (-not $sshCheck) {
            Write-Host "тЭМ SSH installed ркиркерлА. PuTTY ркЕркерк╡рк╛ OpenSSH install ркХрк░рлЛ." -ForegroundColor Red
            return $false
        }
        return $true
    }
    catch {
        Write-Host "тЭМ SSH connection error: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

function Get-DatabaseList {
    return @(
        @{Name="katha_sales.db"; Local="database/katha_sales.db"; Server="database/katha_sales.db"},
        @{Name="kathasales_live_backup.db"; Local="database/kathasales_live_backup.db"; Server="database/kathasales_live_backup.db"},
        @{Name="school_salary.db"; Local="school/database/school_salary.db"; Server="school/database/school_salary.db"}
    )
}

function Create-Backup {
    Write-Header "ЁЯТ╛ ркмрлЗркХркЕркк ркмркирк╛рк╡рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..."
    
    $timestamp = Get-Date -Format 'yyyyMMdd_HHmmss'
    $backupDir = "$($config.BackupPath)$timestamp"
    
    New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
    
    $databases = Get-DatabaseList
    
    foreach ($db in $databases) {
        if (Test-Path $db.Local) {
            $backupFile = "$backupDir/$($db.Name)"
            Copy-Item $db.Local $backupFile
            $size = (Get-Item $backupFile).Length
            $sizeKB = [math]::Round($size / 1KB, 2)
            Write-Host "   тЬЕ $($db.Name) ркмрлЗркХркЕркк ркмркирлНркпрлБркВ ($sizeKB KB)" -ForegroundColor Green
        }
    }
    
    # Create backup info
    $backupInfo = @"
ркХркерк╛ рк╕рлЗрк▓рлНрк╕ ркбрлЗркЯрк╛ркмрлЗркЭ ркмрлЗркХркЕркк
===============================================
ркдрк╛рк░рлАркЦ: $(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')
ркбрк┐рк░рлЗркХрлНркЯрк░рлА: $backupDir

ркмрлЗркХркЕркк ркХрк░рлЗрк▓рлА рклрк╛ркИрк▓рлНрк╕:
$(Get-ChildItem $backupDir -Name | Where-Object { $_ -ne "backup_info.txt" } | ForEach-Object { "- $_" })

ркирлЛркВркз: ркЖ ркмрлЗркХркЕркк рк╕рлБрк░ркХрлНрк╖рк┐ркд рк░рк╛ркЦрлЛ
"@
    
    $backupInfo | Out-File "$backupDir/backup_info.txt" -Encoding UTF8
    
    Write-Host ""
    Write-Host "тЬЕ ркмрлЗркХркЕркк ркХркорлНрккрлНрк▓рлАркЯ: $backupDir" -ForegroundColor Green
    return $backupDir
}

function Sync-LocalToServer {
    Write-Header "ЁЯУд рк▓рлЛркХрк▓ ркерлА рк╕рк░рлНрк╡рк░ рккрк░ рк╕рк┐ркВркХ ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..."
    
    if (-not (Test-SSHConnection)) {
        return
    }
    
    $databases = Get-DatabaseList
    
    foreach ($db in $databases) {
        if (Test-Path $db.Local) {
            Write-Host "   ЁЯУд $($db.Name) ркЕрккрк▓рлЛркб ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Blue
            
            # Create server directory if not exists
            $serverDir = Split-Path $db.Server -Parent
            ssh $($config.ServerUser)@$($config.ServerHost) "mkdir -p $serverDir"
            
            # Upload file
            scp $db.Local "$($config.ServerUser)@$($config.ServerHost):$($config.ServerPath)$($db.Name)"
            
            Write-Host "   тЬЕ $($db.Name) ркЕрккрк▓рлЛркб ркеркпрлБркВ" -ForegroundColor Green
        } else {
            Write-Host "   тЪая╕П  $($db.Name) рк▓рлЛркХрк▓ рккрк░ ркиркерлА ркорк│рлНркпрлБркВ" -ForegroundColor Yellow
        }
    }
    
    Write-Host ""
    Write-Host "тЬЕ рк▓рлЛркХрк▓ ркерлА рк╕рк░рлНрк╡рк░ рк╕рк┐ркВркХ ркХркорлНрккрлНрк▓рлАркЯ" -ForegroundColor Green
}

function Sync-ServerToLocal {
    Write-Header "ЁЯУе рк╕рк░рлНрк╡рк░ ркерлА рк▓рлЛркХрк▓ рккрк░ рк╕рк┐ркВркХ ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..."
    
    if (-not (Test-SSHConnection)) {
        return
    }
    
    $databases = Get-DatabaseList
    
    foreach ($db in $databases) {
        Write-Host "   ЁЯУе $($db.Name) ркбрк╛ркЙркирк▓рлЛркб ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Blue
        
        # Create local directory if not exists
        $localDir = Split-Path $db.Local -Parent
        if (-not (Test-Path $localDir)) {
            New-Item -ItemType Directory -Path $localDir -Force | Out-Null
        }
        
        # Download file
        scp "$($config.ServerUser)@$($config.ServerHost):$($config.ServerPath)$($db.Name)" $db.Local
        
        if (Test-Path $db.Local) {
            $size = (Get-Item $db.Local).Length
            $sizeKB = [math]::Round($size / 1KB, 2)
            Write-Host "   тЬЕ $($db.Name) ркбрк╛ркЙркирк▓рлЛркб ркеркпрлБркВ ($sizeKB KB)" -ForegroundColor Green
        } else {
            Write-Host "   тЭМ $($db.Name) ркбрк╛ркЙркирк▓рлЛркб рки ркеркпрлБркВ" -ForegroundColor Red
        }
    }
    
    Write-Host ""
    Write-Host "тЬЕ рк╕рк░рлНрк╡рк░ ркерлА рк▓рлЛркХрк▓ рк╕рк┐ркВркХ ркХркорлНрккрлНрк▓рлАркЯ" -ForegroundColor Green
}

function Compare-Databases {
    Write-Header "ЁЯФН ркбрлЗркЯрк╛ркмрлЗркЭ ркХркорлНрккрлЗрк░рк┐ркЭрки"
    
    $databases = Get-DatabaseList
    
    foreach ($db in $databases) {
        Write-Host "   ЁЯФН $($db.Name) ркЪрлЗркХ ркХрк░рк╡рк╛ркорк╛ркВ ркЖрк╡рлЗ ркЫрлЗ..." -ForegroundColor Blue
        
        $localExists = Test-Path $db.Local
        $serverExists = $false
        
        if (Test-SSHConnection) {
            $serverExists = ssh $($config.ServerUser)@$($config.ServerHost) "test -f $($config.ServerPath)$($db.Name) && echo 'exists'"
        }
        
        if ($localExists) {
            $localSize = (Get-Item $db.Local).Length
            $localModified = (Get-Item $db.Local).LastWriteTime
            Write-Host "   тЬЕ рк▓рлЛркХрк▓: $([math]::Round($localSize/1KB, 2)) KB ($localModified)" -ForegroundColor Green
        } else {
            Write-Host "   тЭМ рк▓рлЛркХрк▓: ркиркерлА ркорк│рлНркпрлБркВ" -ForegroundColor Red
        }
        
        if ($serverExists) {
            Write-Host "   тЬЕ рк╕рк░рлНрк╡рк░: ркорк│рлНркпрлБркВ" -ForegroundColor Green
        } else {
            Write-Host "   тЭМ рк╕рк░рлНрк╡рк░: ркиркерлА ркорк│рлНркпрлБркВ" -ForegroundColor Red
        }
        
        Write-Host ""
    }
}

function Show-Usage {
    Write-Header "ЁЯУЦ ркбрлЗркЯрк╛ркмрлЗркЭ рк╕рк┐ркВркХрлНрк░ркирк╛ркИркЭрлЗрк╢рки рк╕рлНркХрлНрк░рк┐рккрлНркЯ"
    
    Write-Host "ркЙрккркпрлЛркЧ:" -ForegroundColor Yellow
    Write-Host "  .\database-sync.ps1 [Action] [Environment]" -ForegroundColor White
    Write-Host ""
    Write-Host "Actions:" -ForegroundColor Yellow
    Write-Host "  sync     - ркбрлЗркЯрк╛ркмрлЗркЭ рк╕рк┐ркВркХ ркХрк░рлЛ" -ForegroundColor White
    Write-Host "  backup   - ркмрлЗркХркЕркк ркмркирк╛рк╡рлЛ" -ForegroundColor White
    Write-Host "  compare  - ркбрлЗркЯрк╛ркмрлЗркЭ ркХркорлНрккрлЗрк░ ркХрк░рлЛ" -ForegroundColor White
    Write-Host ""
    Write-Host "Environments:" -ForegroundColor Yellow
    Write-Host "  local    - рк▓рлЛркХрк▓ ркерлА рк╕рк░рлНрк╡рк░" -ForegroundColor White
    Write-Host "  server   - рк╕рк░рлНрк╡рк░ ркерлА рк▓рлЛркХрк▓" -ForegroundColor White
    Write-Host ""
    Write-Host "ркЙркжрк╛рк╣рк░ркгрлЛ:" -ForegroundColor Yellow
    Write-Host "  .\database-sync.ps1 sync local    # рк▓рлЛркХрк▓ ркерлА рк╕рк░рлНрк╡рк░ рк╕рк┐ркВркХ" -ForegroundColor White
    Write-Host "  .\database-sync.ps1 sync server   # рк╕рк░рлНрк╡рк░ ркерлА рк▓рлЛркХрк▓ рк╕рк┐ркВркХ" -ForegroundColor White
    Write-Host "  .\database-sync.ps1 backup        # ркмрлЗркХркЕркк ркмркирк╛рк╡рлЛ" -ForegroundColor White
    Write-Host "  .\database-sync.ps1 compare       # ркХркорлНрккрлЗрк░ ркХрк░рлЛ" -ForegroundColor White
}

# Main execution
switch ($Action.ToLower()) {
    "sync" {
        switch ($Environment.ToLower()) {
            "local" {
                Create-Backup
                Sync-LocalToServer
            }
            "server" {
                Create-Backup
                Sync-ServerToLocal
            }
            default {
                Write-Host "тЭМ ркЧрк▓ркд environment. 'local' ркЕркерк╡рк╛ 'server' рк╡рк╛рккрк░рлЛ." -ForegroundColor Red
            }
        }
    }
    "backup" {
        Create-Backup
    }
    "compare" {
        Compare-Databases
    }
    default {
        Show-Usage
    }
}

Write-Host ""
Write-Host "Press any key to exit..." -ForegroundColor Gray
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown") 